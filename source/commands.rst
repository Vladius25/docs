=============================================
Список часто используемых команд
=============================================

Разбор команды
=============================================

Если хотите быстро понять, что делает команда, что означают ее опции и аргументы, зайдите на `explainshell.com <https://www.explainshell.com/>`_. К сожалению, ресурс заблокирован в России.

.. _comlist:

Список команд
=============================================

man
--------

* ``man <команда>`` - подробная информация о команде *<команда>*

pwd
-------

* ``pwd`` - текущая директория

cd
-------

* ``cd <директория>`` - сменить текущую директорию на <директория>

    - Директориями в **GNU/Linux** называются папки
    - ``~`` - домашняя директория пользователя

ls
---------

* ``ls`` - список файлов и папок в текущей директории
    
    - ``ls -l`` - подробный список(включает права, владельца, группу, размер и время редактирования)
    - ``ls -a`` - скрытые файлы и папки(которые начинаются с ``.``)
    - ``ls -la`` - две опции вместе
    - ``ls <дир>`` - список файлов в директории *<дир>*

touch
----------

* ``touch <файл>`` - создает файл *<файл>*

mkdir
----------

* ``mkdir <дир>`` - создает директорию *<дир>*
    
    - ``mkdir -p <дир>`` - создает директорию *<дир>* и все вышележащиее директории
    - например, ``mkdir -p /test/test2/test3`` - Создаст директории *test*, *test2*, *test3*

cp
-----

* ``cp <файл1> <файл2>`` - копировать *<файл1>* в *<файл2>*
    
    - ``cp -r <дир1> <дир2>`` - копировать директорию *<дир1>* в *<дир2>*

mv
-------

* ``mv <1> <2>`` - переместить файл или директорию <1> в <2>

rm
------

* ``rm <файл>`` - удаляет файл *<файл>*
    
    - ``rm -rf <дир>`` - удаляет директорию *<дир>* и все ее содержимое

echo
--------

* ``echo <текст>`` - печатает *<текст>*
    
    - ``echo <текст> > <файл>`` - заменяет содержимое файла *<файл>* текстом *<текст>*
    - ``echo <текст> >> <файл>`` - добавляет текст *<текст>* в конец файла *<файл>*
    - ``echo <текст> 1>&2`` - перенаправление **stdout** в **stderr**
    - Если целевого файла нет, он будет создан

cat
-----

* ``cat <файл>`` - печатает содержимое файла *<файл>*
    
    - ``cat <файл1> > <файл2>`` - заменяет содержимое файла *<файл1>* содержимым *<файл2>*
    - ``cat <файл1> >> <файл2>`` - добавляет текст файла *<файл1>* в конец файла *<файл2>*
    - Если целевого файла нет, он будет создан

ping
--------

* ``ping <хост>`` - проверить доступность <хост> в сети
    
    - Например, ``ping school9.perm.ru``
    - Чтобы остановить нажмите **Ctrl-C**

ip
-----

* ``ip`` - позволяет выполнять настройку сетевой подсистемы
    
    - ``ip link`` - информация о сетевых интерйесах
    - ``ip addr`` - информация о сетевых интерйесах и адресах
    - ``ip route`` - таблица маршрутиризации
    - ``ip neigh`` - текущая ARP-таблица(таблица соотвествия *IP-* и *MAC*-адресов)

useradd
--------

* ``useradd <пользователь>`` - создать пользователя *<пользователь>*
    
    - ``useradd -m <пользователь>`` - создать пользователя и его домашнюю директорию(*/home/<пользователь>*)

passwd
--------

* ``passwd <пользователь>`` - задать пароль пользователю *<пользователь>*

su
------

* ``su <пользователь>`` - авторизоваться под пользователем *<пользователь>*

sudo
--------

* ``sudo <команда>`` - выполнить команду *<команда>* от имени суперпользователя **root**
    
    - Требует права на использование. 
    - Не требует пароль **root**.
    - Все команды логируются.

exit
-------

* ``exit`` - выйти/деавторизоваться

ps
------

* ``ps`` - вывести список активных процессов текущего пользователя
    
    - ``ps -e`` - список всех активных процессов 

htop
--------

* ``top`` - вывести в виде таблицы перечень запущенных процессов и оценить, какой объем ресурсов они потребляют
* ``htop`` - аналогично. Более человеко-читаемый и удобный. Обычно используется вместо ``top``
    
    - Требуется пакет *htop* 

kill
------

* ``kill <pid>`` - отправляет сигнал процессу с идентификатором *<pid>*
    
    - ``kill -s <сигнал> <pid>`` - отправляет процессу с идентификатором *<pid>* сигнал *<сигнал>*
    - Если не указана опция ``-s`` отправит **SIGTERM**
    - ``man signal.7`` - подробнее о сигналах

ssh
------

* ``ssh <пользователь>@<хост>`` - удаленно подключиться к компьютеру *<хост>* и зайти под пользователем *<пользователь>*
    
    - **SSH** -  сетевой протокол, позволяющий производить удалённое управление операционной системой
    - Когда вы подключитесь к *<хост>*, увидите ту же консоль
    - ``ssh <пользователь>@<хост> -p <порт>`` - подключение к порту <порт>(если не указано, то используется 22)

scp
-------

* ``scp <файл> <пользователь>@<хост>:<дир>`` - отправить файл *<файл>* по протоколу **SSH** на компьютер *<хост>* под пользователем *<пользователь>* в директорию *<дир>*
   
    - Например, ``scp task.xml root@cab13c1.linux.sch9.lan:/home/vasyan/``
    - ``scp -r <дир1> <пользователь>@<хост>:<дир2>`` - то же самое для директории

hostname
-----------------

* ``hostname`` - имя компьютера

Установка пакетов
--------------------------------

* ``dnf install <пакет>`` - установка пакета *<пакет>* пакетным менеджером *dnf*
* ``apt install <пакет>``- установка пакета *<пакет>* пакетным менеджером *apt*
* ``pacman -S`` - установка пакета *<пакет>* пакетным менеджером *pacman*

Полезные комбинации клавиш
------------------------------

Не команды, но полезно знать

* ``Ctrl-C`` - посылает запущенному в треминале процессу **SIGINT** *(сигнал для остановки процесса)*
* ``Ctrl-D`` - комбинация, которая отправляет в консоль *EOF (End Of File)*. Работает схожим образом с ``exit``
* ``Ctrl-Z`` - отправляет процессу **SIGSTOP** *(сигнал, посылаемый для принудительной приостановки выполнения процесса)*

    - Для возобновления выполнения используется **SIGCONT** или команда ``fg``

